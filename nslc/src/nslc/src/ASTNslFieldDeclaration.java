package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTNslFieldDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTNslFieldDeclaration extends SimpleNode
{

    boolean publicField = false,
            privateField = true,
            protectedField = false;
    boolean isNslType;

    public ASTNslFieldDeclaration(int id)
    {
        super(id);
    }

    public ASTNslFieldDeclaration(NslParser p, int id)
    {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public void setPublic(boolean value)
    {
        publicField = value;
        privateField = !value;
        protectedField = !value;
    }

    public void setPrivate(boolean value)
    {
        publicField = !value;
        privateField = value;
        protectedField = !value;
    }

    public void setProtected(boolean value)
    {
        publicField = !value;
        privateField = !value;
        protectedField = value;
    }

    public boolean isPublic()
    {
        return publicField;
    }

    public boolean isPrivate()
    {
        return privateField;
    }

    public boolean isProtected()
    {
        return protectedField;
    }

    public String getQualifiers()
    {
        StringBuilder qual = new StringBuilder("");
        SimpleNode arg = (SimpleNode) jjtGetChild(0);

        Token t = first;
        Token end = arg.getFirstToken();

        while (t != end)
        {
            qual.append(t.image);
            qual.append(' ');
            t = t.next;
        }
        return qual.toString();
    }

    public String getType()
    {
        SimpleNode nameNode = (SimpleNode) jjtGetChild(0);
        String name;
        if (nameNode instanceof ASTName)
        {
            name = ((ASTName) nameNode).getName();
        }
        else
        {
            name = ((ASTPrimitiveType) nameNode).getType();
        }

        return name;
    }

    public String[] getVariables()
    {
        int num = jjtGetNumChildren() - 1;
        String names[] = new String[num];

        if (jjtGetChild(0) instanceof ASTName)
        {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++)
            {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                names[i] = variable.getName();
            }
        }
        else
        {
            ASTNslArrayDeclarator variable;
            for (int i = 0; i < num; i++)
            {
                variable = (ASTNslArrayDeclarator) jjtGetChild(i + 1);
                names[i] = variable.getName();
            }
        }

        return names;
    }

    public String[] getArguments()
    {
        int num = jjtGetNumChildren() - 1;
        String arguments[] = new String[num];

        if (jjtGetChild(0) instanceof ASTName)
        {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++)
            {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                arguments[i] = variable.getArguments();
            }
        }
        else
        {
            ASTNslArrayDeclarator variable;
            for (int i = 0; i < num; i++)
            {
                variable = (ASTNslArrayDeclarator) jjtGetChild(i + 1);
                arguments[i] = variable.getArrayArguments();
            }
        }

        return arguments;
    }

    public String[] getVariableInitializer()
    {
        int num = jjtGetNumChildren() - 1;
        String init[] = new String[num];

        if (jjtGetChild(0) instanceof ASTName)
        {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++)
            {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                init[i] = variable.getVariableInitializer();
            }
        }
        else
        {
            for (int i = 0; i < num; i++)
            {
                init[i] = null;
            }
        }

        return init;
    }

    public static String getArraySuffix(int dim)
    {
        StringBuilder suffix = new StringBuilder("");
        for (int i = 0; i < dim; i++)
        {
            suffix.append("[]");
        }
        return suffix.toString();
    }

    public String getTypeSuffix(int child)
    {
        if (jjtGetChild(0) instanceof ASTName)
        {
            return "";
        }
        else
        {
            ASTNslArrayDeclarator variable;
            variable = (ASTNslArrayDeclarator) jjtGetChild(child + 1);
            return getArraySuffix(variable.getDim());
        }
    }

    public String toJava(NslScope scope)
    {

        StringBuilder code = new StringBuilder((getQualifiers().length() == 0) ? "" : (getQualifiers() + ' '));
        code.append(getType());
        code.append(' ');

        String vars[] = getVariables();

        if (vars.length > 0)
        {
            code.append(vars[0]);
            code.append(getTypeSuffix(0));
            for (int i = 1; i < vars.length; i++)
            {
                code.append(", ");
                code.append(vars[i]);
                code.append(getTypeSuffix(i));
            }
        }

        first.image = code.toString();
        first.next = last;

        return code.toString();
    }



    public void updateScope(NslScope scope)
    {
        String qualifiers = getQualifiers();
        String type = getType();
        String names[] = getVariables();
        NslVariable temp;
        isNslType = false;
        if (jjtGetChild(0) instanceof ASTName || (type.indexOf("String") >= 0))
        {
            String classType = type;
            isNslType = ! (type.indexOf("String") >= 0 && type.indexOf("Nsl")!=0);
            if (scope.isArray(classType))
            {
                classType = classType.substring(0, classType.indexOf("["));
            }
            NslCompiler.parseType(classType, NslCompiler.libraryDir, scope.getImportList());
        }

        for (int i = 0; i < names.length; i++)
        {
            temp = new NslVariable(qualifiers, type + getTypeSuffix(i), names[i], (SimpleNode) jjtGetChild(i + 1));
            temp.setNslType(isNslType);
            temp.setNslArrayType(!isNslType);
            if (!scope.addLocalVar(temp))
            {
                try
                {
                    ASTVariableDeclarator variable = (ASTVariableDeclarator) jjtGetChild(i + 1);
                    NslCompiler.printError("ASTFiledDeclaration", new StringBuilder("").append("Variable ").append(variable.getName()).append(" was already defined in this scope").toString(), variable.getFirstToken().beginLine, variable.getFirstToken().beginColumn);
                }
                catch (ClassCastException ex)
                {
                    try
                    {
                        ASTNslVariableDeclarator variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                        NslCompiler.printError("ASTFiledDeclaration", new StringBuilder("").append("Variable ").append(variable.getName()).append(" was already defined in this scope").toString(), variable.getFirstToken().beginLine, variable.getFirstToken().beginColumn);
                    }
                    catch (ClassCastException exNsl)
                    {
                        NslCompiler.printError("ASTFiledDeclaration", new StringBuilder("").append("Compiler Bug. Class cast exception: trying to assing an ").append(jjtGetChild(i + 1).getClass().getName()).append(" to nslc.src.ASTVariableDeclarator and a nslc.src.ASTNslVariableDeclarator").toString());
                    }
                }
            }
        }
    }

    public String toXMLOpen(String prefix)
    {
        String modifiers = getQualifiers();
        return prefix + '<' + toString() + " modifiers=\"" + modifiers + "\">";
    }
}
