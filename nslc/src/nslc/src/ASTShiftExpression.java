package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTShiftExpression.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

import java.io.PrintStream;

public class ASTShiftExpression extends ASTExpression
{
    public ASTShiftExpression(int id)
    {
        super(id);
    }

    public ASTShiftExpression(NslParser p, int id)
    {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String getOperator(int child)
    {
        int childNum = jjtGetNumChildren();

        if (childNum < 2)
        {
            return "";
        }

        ASTExpression oper = (ASTExpression) jjtGetChild(child - 1);
        return oper.getLastToken().next.image;
    }

    public void dumpXML(String prefix, PrintStream out)
    {
        String xml = toXMLOpen(prefix);
        if (xml != null)
        {
            out.println(xml);
        }
        if (children != null)
        {
            SimpleNode n = (SimpleNode) children[0];
            if (n != null)
            {
                n.dumpXML(prefix + ' ', out);
            }
            for (int i = 1; i < children.length; ++i)
            {
                n = (SimpleNode) children[i];
                if (n != null)
                {
                    String operator = getOperator(i);
                    if (operator.equals(">>"))
                    {
                        operator = "&gt;&gt;";
                    }
                    else if (operator.equals("<<"))
                    {
                        operator = "&lt;&lt;";
                    }
                    else if (operator.equals(">>>"))
                    {
                        operator = "&gt;&gt;&gt;";
                    }
                    xml = new StringBuilder("").append("<Operator>").append(operator).toString();
                    out.println(new StringBuilder("").append(prefix).append(' ').append(xml).toString());
                    xml = "</Operator>";
                    out.println(new StringBuilder("").append(prefix).append(' ').append(xml).toString());
                    n.dumpXML(new StringBuilder("").append(prefix).append(' ').toString(), out);
                }
            }
        }
        xml = toXMLClose(prefix);
        if (xml != null)
        {
            out.println(xml);
        }
    }
}
