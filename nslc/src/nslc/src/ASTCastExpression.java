package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTCastExpression.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTCastExpression extends ASTExpression
{
    public ASTCastExpression(int id)
    {
        super(id);
    }

    public ASTCastExpression(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String getExpressionType()
    {
        return expressionType;
    }

    public boolean isNslExpression()
    {
        return nslExpression;
    }

    public String getType()
    {
        ASTType node = (ASTType) jjtGetChild(0);
        return node.getType();
    }

    public String getUnaryExpressionType()
    {
        SimpleNode node = (SimpleNode) jjtGetChild(1);
        if (node instanceof ASTUnaryExpression)
        {
            return ((ASTUnaryExpression) node).getExpressionType();
        }
        return ((ASTUnaryExpressionNotPlusMinus) node).getExpressionType();
    }

    public String toJava(NslScope scope)
    {
        SimpleNode oper = (SimpleNode) jjtGetChild(1);
        String unaryExpression = getUnaryExpressionType();

        if ((scope.isNslType(expressionType) &&
                scope.isNumeric(unaryExpression) &&
                (scope.getDim(expressionType) != scope.getDim(unaryExpression))) ||
                (scope.isNslType(unaryExpression) &&
                        scope.isNumeric(expressionType) &&
                        (scope.getDim(expressionType) != scope.getDim(unaryExpression))) ||
                (scope.isNslType(unaryExpression) &&
                        scope.isNslType(expressionType) &&
                        (scope.getDim(expressionType) != scope.getDim(unaryExpression))))
        {

            NslCompiler.printError("nslc.src.ASTCastExpression", "Trying to cast wrong dimensions", oper.getFirstToken().beginLine, oper.getFirstToken().beginColumn);

        }
        else if (scope.isNslType(expressionType) &&
                (scope.isNumeric(unaryExpression) || unaryExpression.equals("boolean")))
        {
            first.image = "(new " + expressionType + '(';
            first.next = ((SimpleNode) jjtGetChild(1)).getFirstToken();
            Token end = ((SimpleNode) jjtGetChild(1)).getLastToken();
            end.image += "))";
        }
        else if (scope.isNslType(unaryExpression) &&
                (scope.isNumeric(expressionType) || expressionType.equals("boolean")))
        {
            Token end = ((SimpleNode) jjtGetChild(1)).getLastToken();
            end.image += ".get()";
        }
        else if (scope.isNslType(expressionType) &&
                scope.isNslType(unaryExpression))
        {
            first.image = "(new " + expressionType + '(';
            first.next = ((SimpleNode) jjtGetChild(1)).getFirstToken();
            Token end = ((SimpleNode) jjtGetChild(1)).getLastToken();
            end.image += "))";
        }

        return "";
    }

    public void updateScope(NslScope scope)
    {
        expressionType = getType();
        nslExpression = scope.isNslType(expressionType);
    }
}
