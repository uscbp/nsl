package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTStatementExpression.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTStatementExpression extends SimpleNode
{

    String operator = null;

    public ASTStatementExpression(int id)
    {
        super(id);
    }

    public ASTStatementExpression(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String toJava(NslScope scope)
    {

        int childNum = jjtGetNumChildren();
        SimpleNode node = (SimpleNode) jjtGetChild(0);
        if (node instanceof ASTPrimaryExpression)
        {
            if (childNum > 1 && ((ASTPrimaryExpression) node).isNslExpression())
            {
                // Simple Assignment statement nslVar.set(...)
                ASTAssignmentOperator operator = (ASTAssignmentOperator) jjtGetChild(1);
                operator.removeOperator();
                SimpleNode temp = (SimpleNode) jjtGetChild(childNum - 1);
                Token end = temp.getLastToken();
                end.image = end.image + ')';

                String type1 = ((ASTPrimaryExpression) node).getExpressionType();
                String type2 = ((ASTExpression) temp).getExpressionType();
                scope.getDim(type1);
                scope.getDim(type2);

            }
            else if (childNum > 1)
            {

                ASTAssignmentOperator operator = (ASTAssignmentOperator) jjtGetChild(1);
                SimpleNode temp = (SimpleNode) jjtGetChild(childNum - 1);

                String type1 = ((ASTPrimaryExpression) node).getExpressionType();
                String type2 = ((ASTExpression) temp).getExpressionType();
                int dim1 = scope.getDim(type1);
                int dim2 = scope.getDim(type2);

                if (((ASTExpression) temp).isNslExpression() || (dim1 != dim2 && !type2.equals("null")))
                {
                    NslCompiler.printError("nslc.src.ASTStatementExpression", "Trying to assign non compatible types: " + type1 + " <- " + type2, operator.getFirstToken().beginLine, operator.getFirstToken().beginColumn);
                }
            }
        }
        return "";
    }

    public void setOperator(String oper)
    {
        operator = oper;
    }

    public String getOperator()
    {
        return operator;
    }

    public String toXMLOpen(String prefix)
    {

        operator = ((operator == null) ? "" : " operator=\"" + operator + '\"');

        return prefix + '<' + toString() + operator + '>';
    }

}
