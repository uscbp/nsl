package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTAllocationExpression.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTAllocationExpression extends ASTExpression
{
    public ASTAllocationExpression(int id)
    {
        super(id);
    }

    public ASTAllocationExpression(NslParser p, int id)
    {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String getExpressionType()
    {
        return expressionType;
    }

    public boolean isNslExpression()
    {
        return nslExpression;
    }

    public String getType()
    {
        StringBuilder type;
        SimpleNode node = (SimpleNode) jjtGetChild(0);
        if (node instanceof ASTPrimitiveType)
        {
            ASTPrimitiveType tmp = (ASTPrimitiveType) node;
            ASTArrayDimsAndInits dims = (ASTArrayDimsAndInits) jjtGetChild(1);
            type = new StringBuilder(tmp.getType());
            type.append(dims.getDims());
        }
        else
        {
            ASTName tmp = (ASTName) node;

            type = new StringBuilder(tmp.getName());

            node = (SimpleNode) jjtGetChild(1);
            if (node instanceof ASTArrayDimsAndInits)
            {
                ASTArrayDimsAndInits dims = (ASTArrayDimsAndInits) node;
                type.append(dims.getDims());
            }
        }
        return type.toString();
    }

    public void updateScope(NslScope scope)
    {
        expressionType = getType();
        // See if it has been parsed
        NslCompiler.parseType(expressionType, NslCompiler.libraryDir, scope.getImportList());
        nslExpression = scope.isNslType(expressionType);
    }
}
