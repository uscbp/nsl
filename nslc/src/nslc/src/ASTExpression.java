package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTExpression.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTExpression extends SimpleNode
{
    protected String expressionType = null;
    protected boolean nslExpression = false;

    public ASTExpression(int id)
    {
        super(id);
    }

    public ASTExpression(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public void setNslExpression(boolean value)
    {
        nslExpression = value;
    }

    public boolean isNslExpression()
    {
        SimpleNode temp = (SimpleNode) jjtGetChild(0);
        if (temp instanceof ASTExpression)
        {
            return ((ASTExpression) temp).isNslExpression();
        }
        return false;
    }

    public String getExpressionType()
    {
        SimpleNode temp = (SimpleNode) jjtGetChild(0);
        if (temp instanceof ASTExpression)
        {
            return ((ASTExpression) temp).getExpressionType();
        }
        return null;
    }

    public String getExpression()
    {
        Token t = first;
        Token end = last;

        StringBuilder expression = new StringBuilder(t.image);
        while (t != end)
        {
            t = t.next;
            expression.append(t.image);
        }
        return expression.toString();
    }

    public String toJava(NslScope scope)
    {

        int childNum = jjtGetNumChildren();

        if (childNum > 1 && isNslExpression())
        {
            // Multiple Assignment statement nslVar.set(...)
            ASTAssignmentOperator operator = (ASTAssignmentOperator) jjtGetChild(1);
            operator.removeOperator();
            String tempName = scope.getTempName(getExpressionType());
            first.image = tempName + ".setReference(" + first.image;
            String wrap = "))";
            SimpleNode temp = (SimpleNode) jjtGetChild(childNum - 1);
            Token end = temp.getLastToken();
            end.image = end.image + wrap;
        }
        else if (childNum > 1)
        {
            ASTConditionalExpression expr1 = (ASTConditionalExpression) jjtGetChild(0);
            ASTAssignmentOperator operator = (ASTAssignmentOperator) jjtGetChild(1);
            ASTExpression expr2 = (ASTExpression) jjtGetChild(2);

            String type1 = expr1.getExpressionType();
            String type2 = expr2.getExpressionType();

            int dim1 = scope.getDim(type1);
            int dim2 = scope.getDim(type2);

            if (expr1.isNslExpression() || (dim1 != dim2 && !type2.equals("null")))
            {
                NslCompiler.printError("nslc.src.ASTStatementExpression", "Trying to assign non compatible types: " + type1 + " <- " + type2, operator.getFirstToken().beginLine, operator.getFirstToken().beginColumn);
            }
        }
        return "";
    }

}
