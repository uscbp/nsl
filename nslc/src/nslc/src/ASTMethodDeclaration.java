package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTMethodDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTMethodDeclaration extends SimpleNode
{
    public ASTMethodDeclaration(int id)
    {
        super(id);
    }

    public ASTMethodDeclaration(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String getQualifiers()
    {
        StringBuilder qual = new StringBuilder("");
        ASTResultType arg = (ASTResultType) jjtGetChild(0);

        Token t = first;
        Token end = arg.getFirstToken();

        while (t != end)
        {
            qual.append(t.image);
            qual.append(' ');
            t = t.next;
        }
        return qual.toString();
    }

    public String getMethodName()
    {
        ASTMethodDeclarator temp = (ASTMethodDeclarator) jjtGetChild(1);
        return temp.getMethodName();
    }

    public String getType()
    {
        ASTResultType temp = (ASTResultType) jjtGetChild(0);
        return temp.getType();
    }

    public String[] getFormalTypes()
    {
        ASTMethodDeclarator temp = (ASTMethodDeclarator) jjtGetChild(1);
        return temp.getFormalTypes();
    }

    public void updateScope(NslScope scope)
    {
        String type = getType();
        NslMethod method = new NslMethod(getQualifiers(), type, getMethodName(), getFormalTypes());
        if (scope.isNslType(type))
        {
            method.setNslType(true);
        }
        scope.addMethod(method);
    }

    public String toXMLOpen(String prefix)
    {
        String modifiers = getQualifiers();
        return prefix + '<' + toString() + " modifiers=\"" + modifiers + "\">";
    }
}
