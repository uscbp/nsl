package nslc.src;

import java.util.Enumeration;
import java.util.Vector;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTNslClassDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.

// Copyright: This software may be freely copied provided the toplevel

// Copyright: COPYRIGHT file is included with each such copy.

// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol


public class ASTNslClassDeclaration extends SimpleNode
{
    private boolean inherits = false;

    private static String endLine = System.getProperty("line.separator");

    private boolean implement = false;

    public ASTNslClassDeclaration(int id)
    {
        super(id);
    }

    public ASTNslClassDeclaration(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public void setExtends(boolean value)
    {
        inherits = value;
    }

    public boolean getExtends()
    {
        return inherits;
    }

    public void setImplements(boolean value)
    {
        implement = value;
    }

    public boolean getImplements()
    {
        return implement;
    }

    public String[] getInterfaceNames()
    {
        if (implement)
        {
            int index = (inherits ? 2 : 1);
            if(jjtGetChild(index) instanceof ASTNameList)
            {
                ASTNameList node = (ASTNameList) jjtGetChild(index);
                return node.getNames();
            }
        }
        return null;
    }

    public String getSuperClass()
    {
        if (inherits)
        {
            ASTName nameNode = (ASTName) jjtGetChild(1);

            return nameNode.getName();
        }
        else
        {
            return 'N' + getKind().substring(1);
        }
    }

    public String getClassName()
    {
        Token t = first.next;

        return t.image;
    }

    public String getKind()
    {
        Token t = first;

        return t.image;
    }

    public String toJava(NslScope scope)
    {
        StringBuilder code = new StringBuilder(genNslImports());

        code.append("public class ");
        code.append(getClassName());
        code.append(" extends ");
        code.append(getSuperClass());

        String[] interfaceNames=getInterfaceNames();
        if(interfaceNames!=null)
        {
            if(interfaceNames.length>0)
                code.append(" implements ");
            for(int i=0; i<interfaceNames.length; i++)
            {
                if(i>0)
                    code.append(", ");
                code.append(interfaceNames[i]);
            }
        }
        
        String nslCode = genNslCode(scope);

        first.image = code.toString();

        int bodyIndex = (inherits ? 3 : implement ? 2 : 1);

        SimpleNode body = (SimpleNode) jjtGetChild(bodyIndex);

        first.next = body.getFirstToken();

        Token newCode = new Token();
        newCode.kind = last.kind;
        newCode.beginLine = last.beginLine;
        newCode.beginColumn = last.beginColumn;
        newCode.endLine = last.endLine;
        newCode.endColumn = last.endColumn;
        newCode.image = last.image;
        newCode.next = last.next;
        newCode.specialToken = last.specialToken;

        last.image = nslCode;
        last.next = newCode;

        return code.toString();
    }

    public void updateScope(NslScope scope)
    {
        scope.setClassKind(getKind());
        if(scope.getClassName()==null || scope.getClassName().length()==0)
            scope.setClassName(getClassName());

        ASTFormalParameters formals = (ASTFormalParameters) jjtGetChild(0);
        scope.setClassFormals(formals);

        String types[] = formals.getTypes();
        String names[] = formals.getNames();

        NslVariable temp;
        for (int i = 0; i < names.length; i++)
        {
            temp = new NslVariable(types[i], names[i]);
            if (!scope.addLocalVar(temp))
            {
                ASTFormalParameters variable = (ASTFormalParameters) jjtGetChild(i + 1);
                NslCompiler.printError("nslc.src.ASTNslClassDeclaration", new StringBuilder("").append("Variable ").append(names[i]).append(" was already defined in this scope").toString(), variable.getFirstToken().beginLine, variable.getFirstToken().beginColumn);
            }
        }

        String superClass = getSuperClass();
        scope.setSuperClassName(superClass);

        if (inherits)
        {
            scope.setClassArguments((ASTArguments) jjtGetChild(2));
        }

        NslScope superClassScope = NslCompiler.parseType(superClass, NslCompiler.libraryDir, scope.getImportList());
        if (superClassScope != null)
        {
            scope.setSuperClassScope(superClassScope);
        }
    }

    static String genNslImports()
    {
        StringBuilder strbuf = new StringBuilder("");
        strbuf.append("/*********************************/");
        strbuf.append(endLine);
        strbuf.append("/*                               */");
        strbuf.append(endLine);
        strbuf.append("/*   Importing all Nsl classes   */");
        strbuf.append(endLine);
        strbuf.append("/*                               */");
        strbuf.append(endLine);
        strbuf.append("/*********************************/");
        strbuf.append(endLine);
        strbuf.append(endLine);
        strbuf.append("import nslj.src.system.*;");
        strbuf.append(endLine);
        strbuf.append("import nslj.src.cmd.*;");
        strbuf.append(endLine);
        strbuf.append("import nslj.src.lang.*;");
        strbuf.append(endLine);
        strbuf.append("import nslj.src.math.*;");
        strbuf.append(endLine);
        strbuf.append("import nslj.src.display.*;");
        strbuf.append(endLine);
        strbuf.append("import nslj.src.display.j3d.*;");
        strbuf.append(endLine);
        strbuf.append(endLine);
        strbuf.append("/*********************************/");
        strbuf.append(endLine);
        strbuf.append(endLine);

        return strbuf.toString();
    }

    String genNslCode(NslScope scope)
    {
        StringBuilder strbuf = new StringBuilder("");
        strbuf.append(endLine);
        strbuf.append("\t/******************************************************/");
        strbuf.append(endLine);
        strbuf.append("\t/*                                                    */");
        strbuf.append(endLine);
        strbuf.append("\t/* Generated by nslc.src.NslCompiler. Do not edit these lines! */");
        strbuf.append(endLine);
        strbuf.append("\t/*                                                    */");
        strbuf.append(endLine);
        strbuf.append("\t/******************************************************/");
        strbuf.append(endLine);
        strbuf.append(endLine);
        strbuf.append(genConstructor(scope));
        strbuf.append(endLine);
        strbuf.append("\t/******************************************************/");
        strbuf.append(endLine);
        strbuf.append("\t/*                                                    */");
        strbuf.append(endLine);
        strbuf.append("\t/* End of automatic declaration statements.           */");
        strbuf.append(endLine);
        strbuf.append("\t/*                                                    */");
        strbuf.append(endLine);
        strbuf.append("\t/******************************************************/");
        strbuf.append(endLine);
        strbuf.append(endLine);

        return strbuf.toString();
    }

    static String genTempDeclaration(NslScope scope)
    {
        StringBuilder strbuf = new StringBuilder("");
        Vector tempVarList = scope.getTempVarList();
        Enumeration e = tempVarList.elements();
        NslVariable fieldTmp;
        String instanceType;
        String instanceName;
        while (e.hasMoreElements())
        {
            fieldTmp = (NslVariable) e.nextElement();
            instanceType = fieldTmp.getType();
            instanceName = fieldTmp.getName();
            instanceType = scope.getNslTypeWithoutPort(instanceType);
            strbuf.append('\t');
            strbuf.append(instanceType);
            strbuf.append(' ');
            strbuf.append(instanceName);
            strbuf.append(';');
            strbuf.append(endLine);
        }
        return strbuf.toString();
    }

    static String genTempInstStmt(NslScope scope)
    {
        StringBuilder strbuf = new StringBuilder("");
        Vector tempVarList = scope.getTempVarList();
        Enumeration e = tempVarList.elements();
        NslVariable fieldTmp;
        String instanceType;
        String instanceName;
        String instanceArguments;
        String staticType = "";
        boolean isNsl;
        while (e.hasMoreElements())
        {
            fieldTmp = (NslVariable) e.nextElement();
            instanceType = fieldTmp.getType();
            instanceName = fieldTmp.getName();
            instanceArguments = "";
            if (instanceType.indexOf("static ") >= 0)
            {
                instanceType = instanceType.substring(7);
                staticType = "static ";
            }
            isNsl = scope.isNslType(instanceType);
            if (isNsl)
            {
                instanceType = scope.getNslTypeWithoutPort(instanceType);
                switch (scope.getNslTypeDim(instanceType))
                {
                    case 1:
                        instanceArguments = "1";
                        break;
                    case 2:
                        instanceArguments = "1, 1";
                        break;
                    case 3:
                        instanceArguments = "1, 1, 1";
                        break;
                    case 4:
                        instanceArguments = "1, 1, 1, 1";
                        break;
                }
                strbuf.append("\t\t");
                strbuf.append(staticType);
                strbuf.append(instanceType);
                strbuf.append(' ');
                strbuf.append(instanceName);
                strbuf.append(" = new ");
                strbuf.append(instanceType);
                strbuf.append('(');
                strbuf.append(instanceArguments);
                strbuf.append(");");
                strbuf.append(endLine);
            }
            else
            {
                int dim = scope.getDim(instanceType);
                switch (dim)
                {
                    case 1:
                        instanceArguments = "[1]";
                        break;
                    case 2:
                        instanceArguments = "[1][1]";
                        break;
                    case 3:
                        instanceArguments = "[1][1][1]";
                        break;
                    case 4:
                        instanceArguments = "[1][1][1][1]";
                        break;
                }
                if (dim > 0)
                {
                    String newInstanceType = instanceType.substring(0, instanceType.indexOf("["));
                    strbuf.append("\t\t");
                    strbuf.append(staticType);
                    strbuf.append(instanceType);
                    strbuf.append(' ');
                    strbuf.append(instanceName);
                    strbuf.append(" = new ");
                    strbuf.append(newInstanceType);
                    strbuf.append(instanceArguments);
                    strbuf.append(';');
                    strbuf.append(endLine);
                }
            }
        }

        return strbuf.toString();
    }

    String genTempMethods(NslScope scope)
    {
        StringBuilder strbuf = new StringBuilder("");
        String kind = getKind();
        if (kind.equals("nslClass"))
        {
            strbuf.append("\t/* nslInitTempClass inserted by NPP */");
            strbuf.append(endLine);

            strbuf.append("\tpublic void nslInitTempClass() {");
            strbuf.append(endLine);

            strbuf.append("\t}");
            strbuf.append(endLine);
            strbuf.append(endLine);
        }
        else
        {
            strbuf.append("\t/* nslInitTempModule inserted by nslc.src.NslCompiler */");
            strbuf.append(endLine);

            strbuf.append("\tpublic void nslInitTempModule() {");
            strbuf.append(endLine);

            strbuf.append("\t}");
            strbuf.append(endLine);
            strbuf.append(endLine);

            strbuf.append("\t/* nslInitTempRun inserted by nslc.src.NslCompiler */");
            strbuf.append(endLine);

            strbuf.append("\tpublic void nslInitTempRun() {");
            strbuf.append(endLine);

            strbuf.append("\t}");
            strbuf.append(endLine);
            strbuf.append(endLine);

            strbuf.append("\t/* nslInitTempTrain inserted by nslc.src.NslCompiler */");
            strbuf.append(endLine);

            strbuf.append("\tpublic void nslInitTempTrain() {");
            strbuf.append(endLine);

            strbuf.append("\t}");
            strbuf.append(endLine);
            strbuf.append(endLine);
        }

        return strbuf.toString();
    }

    String genConstructor(NslScope scope)
    {
        StringBuilder strbuf = new StringBuilder("");
        strbuf.append("\t/* Constructor and related methods */");
        strbuf.append(endLine);

        strbuf.append("\t/* makeinst() declared variables */");
        strbuf.append(endLine);

        String kind = getKind();
        String name = getClassName();
        String newName = name.substring(0, 1).toLowerCase() + name.substring(1);
        String superClass = getSuperClass();

        ASTFormalParameters formals = scope.getClassFormals();
        String formalTypes[] = formals.getTypes();
        String formalNames[] = formals.getNames();
        int numFormals = formalTypes.length;

        ASTArguments argumentsNode = scope.getClassArguments();

        String arguments[] = null;
        int numArguments;
        if (argumentsNode != null)
        {
            arguments = argumentsNode.getArguments();
            numArguments = arguments.length;
        }
        else
        {
            numArguments = 0;
        }

        //
        // nslModel Constructor
        //
        if (kind.equals("nslModel"))
        {
            strbuf.append(endLine);
            strbuf.append("\t/* EMPTY CONSTRUCTOR: Called only for the top level module */");
            strbuf.append(endLine);
            strbuf.append("\tpublic ");
            strbuf.append(name);
            strbuf.append("() {");
            strbuf.append(endLine);
            strbuf.append("\t\tsuper(\"");
            strbuf.append(newName);
            strbuf.append("\",(");
            strbuf.append(superClass);
            strbuf.append(")null);");
            strbuf.append(endLine);

            strbuf.append("\t\tinitSys();");
            strbuf.append(endLine);                   // Call initSys

            strbuf.append("\t\tmakeInst");
            strbuf.append(name);
            strbuf.append("(\"");
            strbuf.append(newName);
            strbuf.append("\",null);");
            strbuf.append(endLine);    // Call makeInst

            strbuf.append("\t}");
            strbuf.append(endLine);
        }  // end of Empty Constructor

        //
        // Formal Declaration
        //
        strbuf.append(endLine);
        strbuf.append("\t/* Formal parameters */");
        strbuf.append(endLine);

        //  Add Formals
        for (int i = 0; i < numFormals; i++)
        {
            strbuf.append('\t');
            strbuf.append(formalTypes[i]);
            strbuf.append(' ');
            strbuf.append(formalNames[i]);
            strbuf.append(';');
            strbuf.append(endLine);
        }

        //
        // Temporary Variables Declaration
        //
        strbuf.append(endLine);
        strbuf.append("\t/* Temporary variables */");
        strbuf.append(endLine);

        //  Add Temporaries
        strbuf.append(genTempInstStmt(scope));

        //
        // Generic Constructor
        //
        strbuf.append(endLine);
        strbuf.append("\t/* GENERIC CONSTRUCTOR: */");
        strbuf.append(endLine);

        strbuf.append("\tpublic ");
        strbuf.append(name);
        strbuf.append("(String nslName, NslModule nslParent");

        //  Add Formals
        for (int i = 0; i < numFormals; i++)
        {
            strbuf.append(", ");
            strbuf.append(formalTypes[i]);
            strbuf.append(' ');
            strbuf.append(formalNames[i]);
        }

        strbuf.append(")");
        strbuf.append(endLine);
        strbuf.append("{");
        strbuf.append(endLine);
        strbuf.append("\t\tsuper(nslName, nslParent");
        //  Add Arguments
        for (int i = 0; i < numArguments; i++)
        {
            strbuf.append(", ");
            strbuf.append(arguments[i]);
        }

        strbuf.append(");");
        strbuf.append(endLine);
        
        //  Add Formals init
        for (int i = 0; i < numFormals; i++)
        {
            strbuf.append("\t\tthis.");
            strbuf.append(formalNames[i]);
            strbuf.append('=');
            strbuf.append(formalNames[i]);
            strbuf.append(';');
            strbuf.append(endLine);
        }

        if (!kind.equals("nslClass"))
        {
            strbuf.append("\t\tinitSys();");
            strbuf.append(endLine);   // Call initSys
        }

        strbuf.append("\t\tmakeInst");
        strbuf.append(name);
        strbuf.append("(nslName, nslParent");

        //  Add Arguments
        for (int i = 0; i < numFormals; i++)
        {
            strbuf.append(", ");
            strbuf.append(formalNames[i]);
        }

        strbuf.append(");");
        strbuf.append(endLine);

        strbuf.append("\t}");
        strbuf.append(endLine);

        //
        // nslClass Constructor
        //
        if (kind.equals("nslClass"))
        {
            strbuf.append(endLine);
            strbuf.append(endLine);
            strbuf.append("\tpublic ");
            strbuf.append(name);
            strbuf.append("(String nslName, NslClass nslParent");

            // Add Formals
            for (int i = 0; i < numFormals; i++)
            {
                strbuf.append(", ");
                strbuf.append(formalTypes[i]);
                strbuf.append(' ');
                strbuf.append(formalNames[i]);
            }

            strbuf.append(") {");
            strbuf.append(endLine);

            strbuf.append("\t\tsuper(nslName, nslParent");

            // Add Arguments
            for (int i = 0; i < numArguments; i++)
            {
                strbuf.append(", ");
                strbuf.append(arguments[i]);
            }

            strbuf.append(");");
            strbuf.append(endLine);

            // Add Formals init
            for (int i = 0; i < numFormals; i++)
            {
                strbuf.append("\t\tthis.");
                strbuf.append(formalNames[i]);
                strbuf.append('=');
                strbuf.append(formalNames[i]);
                strbuf.append(';');
                strbuf.append(endLine);
            }

            strbuf.append("\t\tmakeInst");
            strbuf.append(name);
            strbuf.append("(nslName, nslParent");

            // Add Arguments
            for (int i = 0; i < numFormals; i++)
            {
                strbuf.append(", ");
                strbuf.append(formalNames[i]);
            }

            strbuf.append(");");
            strbuf.append(endLine);

            strbuf.append("\t}");
            strbuf.append(endLine);
        }

        //
        // MakeInst
        //
        strbuf.append(endLine);
        strbuf.append("\tpublic void makeInst");
        strbuf.append(name);
        strbuf.append("(String nslName, NslModule nslParent");

        // Add Formals
        for (int i = 0; i < numFormals; i++)
        {
            strbuf.append(", ");
            strbuf.append(formalTypes[i]);
            strbuf.append(' ');
            strbuf.append(formalNames[i]);
        }

        strbuf.append(")");
        strbuf.append(endLine);
        strbuf.append("{ ");
        strbuf.append(endLine);

        strbuf.append("\t\tObject[] nslArgs=new Object[]{");
        if(numFormals>0)
        {
            strbuf.append(formalNames[0]);
            for(int i=1; i<numFormals; i++)
            {
                strbuf.append(", ");
                strbuf.append(formalNames[i]);
            }
        }
        strbuf.append("};");
        strbuf.append(endLine);

        strbuf.append("\t\tcallFromConstructorTop(nslArgs);");
        strbuf.append(endLine);

        // Create Nsl Instances
        Vector classVarScope = scope.getClassVarScope();
        Enumeration e = classVarScope.elements();
        NslVariable fieldTmp;
        String instanceType;
        String instanceName;
        String instanceArguments;
        String variableInit;
        while (e.hasMoreElements())
        {
            fieldTmp = (NslVariable) e.nextElement();
            instanceType = fieldTmp.getType();
            instanceName = fieldTmp.getName();
            instanceArguments = fieldTmp.getArguments();

            if (fieldTmp.isNslType())
            {
                variableInit = fieldTmp.getInitializers();
                instanceArguments = ((instanceArguments != null && instanceArguments.length() != 0) ? (new StringBuilder("").append(", ").append(instanceArguments).toString()) : "");
                strbuf.append("\t\t");
                strbuf.append(instanceName);
                strbuf.append(" = new ");
                strbuf.append(instanceType);
                strbuf.append("(\"");
                strbuf.append(instanceName);
                strbuf.append("\", this");
                strbuf.append(instanceArguments);
                strbuf.append(");");
                strbuf.append(endLine);

                if (variableInit != null)
                {
                    strbuf.append("\t\t");
                    strbuf.append(instanceName);
                    strbuf.append(".set(");
                    strbuf.append(variableInit);
                    strbuf.append(");");
                    strbuf.append(endLine);
                }
            }
            else if (fieldTmp.isNslArrayType())
            {
                instanceType = instanceType.substring(0, instanceType.indexOf("["));
                strbuf.append("\t\t");
                strbuf.append(instanceName);
                strbuf.append(" = new ");
                strbuf.append(instanceType);
                strbuf.append(instanceArguments);
                strbuf.append(';');
                strbuf.append(endLine);
            }
        }

        strbuf.append("\t\tcallFromConstructorBottom();");
        strbuf.append(endLine);

        strbuf.append("\t}");
        strbuf.append(endLine);

        //

        // nslClass makeInst

        //


        if (kind.equals("nslClass"))
        {

            strbuf.append(endLine);

            strbuf.append("\tpublic void makeInst");
            strbuf.append(name);
            strbuf.append("(String nslName, NslClass nslParent");

            // Add Formals

            for (int i = 0; i < numFormals; i++)
            {
                strbuf.append(", ");
                strbuf.append(formalTypes[i]);
                strbuf.append(' ');
                strbuf.append(formalNames[i]);
            }

            strbuf.append(") { ");
            strbuf.append(endLine);

            strbuf.append("\t\tObject[] nslArgs=new Object[]{");
            if(numFormals>0)
            {
                strbuf.append(formalNames[0]);
                for(int i=1; i<numFormals; i++)
                {
                    strbuf.append(", ");
                    strbuf.append(formalNames[i]);
                }
            }
            strbuf.append("};");
            strbuf.append(endLine);
            strbuf.append("\t\tcallFromConstructorTop(nslArgs);");
            strbuf.append(endLine);

            // Put Instantiation of temporaries in makeInst

//      strbuf.append(genTempInstStmt(scope));

            // Create Nsl Instances


            e = classVarScope.elements();

            while (e.hasMoreElements())
            {

                fieldTmp = (NslVariable) e.nextElement();

                instanceType = fieldTmp.getType();

                instanceName = fieldTmp.getName();

                instanceArguments = fieldTmp.getArguments();


                if (fieldTmp.isNslType())
                {


                    variableInit = fieldTmp.getInitializers();

                    instanceArguments = ((instanceArguments != null && instanceArguments.length() != 0) ? (new StringBuilder("").append(", ").append(instanceArguments).toString()) : "");

                    strbuf.append("\t\t");
                    strbuf.append(instanceName);
                    strbuf.append(" = new ");
                    strbuf.append(instanceType);
                    strbuf.append("(\"");
                    strbuf.append(instanceName);
                    strbuf.append("\", this");
                    strbuf.append(instanceArguments);
                    strbuf.append(");");
                    strbuf.append(endLine);

                    if (variableInit != null)
                    {

                        strbuf.append("\t\t");
                        strbuf.append(instanceName);
                        strbuf.append(".set(");
                        strbuf.append(variableInit);
                        strbuf.append(");");
                        strbuf.append(endLine);

                    }

                }
                else if (fieldTmp.isNslArrayType())
                {

                    instanceType = instanceType.substring(0, instanceType.indexOf("["));

                    strbuf.append("\t\t");
                    strbuf.append(instanceName);
                    strbuf.append(" = new ");
                    strbuf.append(instanceType);
                    strbuf.append(instanceArguments);
                    strbuf.append(';');
                    strbuf.append(endLine);

                }

            }


            strbuf.append("\t\tcallFromConstructorBottom();");
            strbuf.append(endLine);


            strbuf.append("\t}");
            strbuf.append(endLine);

        }


        return strbuf.toString();

    }


    public String toXMLOpen(String prefix)
    {

        String kind = getKind();

        String name = getClassName();

        return new StringBuilder("").append(prefix).append('<').append(toString()).append(" kind=\"").append(kind).append("\" name=\"").append(name).append("\">").toString();

    }


}

