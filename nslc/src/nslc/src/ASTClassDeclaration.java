package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTClassDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTClassDeclaration extends SimpleNode
{
    public ASTClassDeclaration(int id)
    {
        super(id);
    }

    public ASTClassDeclaration(NslParser p, int id)
    {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }

    public String getClassName()
    {
        ASTUnmodifiedClassDeclaration node = (ASTUnmodifiedClassDeclaration) jjtGetChild(0);
        return node.getClassName();
    }

    public String getSuperClass()
    {
        ASTUnmodifiedClassDeclaration node = (ASTUnmodifiedClassDeclaration) jjtGetChild(0);
        return node.getSuperClass();
    }


    public String[] getInterfaceNames()
    {
        ASTUnmodifiedClassDeclaration node = (ASTUnmodifiedClassDeclaration) jjtGetChild(0);
        return node.getInterfaceNames();
    }


    public void updateScope(NslScope scope)
    {

        scope.setClassKind("class");

        scope.setClassName(getClassName());


        String superClass = getSuperClass();

        scope.setSuperClassName(superClass);


        NslScope superClassScope = NslCompiler.parseType(superClass, NslCompiler.libraryDir, scope.getImportList());

        if (superClassScope != null)
        {

            scope.setSuperClassScope(superClassScope);

        } //else {

        //nslc.src.NslParser.error=true;

        //System.err.println("nslc.src.ASTNslClassDeclaration [Error]: Error while parsing super class "+superClass);

        //}

        String interfaceNames[] = getInterfaceNames();
        if (interfaceNames != null)
        {
            for (String interfaceName : interfaceNames)
            {
                scope.addInterface(NslCompiler.parseType(interfaceName, NslCompiler.libraryDir, scope.getImportList()));
            }
        }
    }

    public String toXMLOpen(String prefix)
    {
        String name = getClassName();

        return prefix + '<' + toString() + " name=\"" + name + "\">";

    }


}
