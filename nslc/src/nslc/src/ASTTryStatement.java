package nslc.src;/* Generated By:JJTree: Do not edit this line. nslc.src.ASTTryStatement.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTTryStatement extends SimpleNode
{

    boolean hasFinally = false;

    public ASTTryStatement(int id)
    {
        super(id);
    }

    public ASTTryStatement(NslParser p, int id)
    {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(NslParserVisitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }


    public String getFormalType(int index)
    {
        ASTFormalParameter formal = (ASTFormalParameter) jjtGetChild(1 + (index << 1));
        return formal.getType();
    }

    public String getFormalName(int index)
    {
        ASTFormalParameter formal = (ASTFormalParameter) jjtGetChild(1 + (index << 1));
        return formal.getName();
    }

    public void updateScope(NslScope scope)
    {
        String type;
        String name;
        NslVariable temp;

        int numberOfCatches = (jjtGetNumChildren() - 1 - (hasFinally ? 1 : 0)) >> 1;

        for (int i = 0; i < numberOfCatches; i++)
        {

            type = getFormalType(i);
            name = getFormalName(i);

            temp = new NslVariable(type, name);

            if (!scope.addLocalVar(temp))
            {
                ASTFormalParameter variable = (ASTFormalParameter) jjtGetChild(1 + (i << 1));
                NslCompiler.printError("nslc.src.ASTMethodDeclaration", new StringBuilder("").append("Variable ").append(name).append(" was already defined in this scope").toString(), variable.getFirstToken().beginLine, variable.getFirstToken().beginColumn);
            }
        }
    }

    public void setFinally(boolean value)
    {
        hasFinally = value;
    }

    public String toXMLOpen(String prefix)
    {
        String option = (hasFinally ? " hasFinally=\"true\"" : "");
        return prefix + '<' + toString() + option + '>';
    }
}
